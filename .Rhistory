print("hello")
install.packages(c("nlme", "survival"))
print("hello")
library(ggplot2)
library(ggplot)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(ggplot2)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
print("this in a r code chunk")
> print("this in a r code chunk")
print("this in a r code chunk")
plot(pressure)
library(rmarkdown)
render("/path/to/hello-Rmd.Rmd")
print("this is a r code chunk")
R
library(markdown)
library(rmarkdown)
{r}
nile <- scan("nile.txt")
nile
{r}
nile <- scan("nile.txt")
nile
nile <- read.table("~/Downloads/nile.txt", quote="\"", comment.char="")
View(nile)
{r}
nile <- scan("nile.txt")
nile
{r}
typeof(nile)
{r}
typeof(nile_char)
{r}
hist(nile)
{r}
nile_char <- scan("nile.txt", what = character())
nile_char
{r}
nile <- scan("nile.txt")
nile
{r}
typeof(nile)
{r}
hist(nile)
{r}
nile_char <- scan("nile.txt", what = character())
nile_char
{r}
typeof(nile_char)
{r}
nile <- scan("nile.txt")
nile
{r}
typeof(nile)
{r}
hist(nile)
{r}
nile <- scan("nile.txt")
nile
{r}
typeof(nile)
{r}
nile <- scan("nile.txt")
nile
{}
{r}
typeof(nile)
{r}
nile <- scan("nile.txt")
nile
{}
{r}
typeof(nile)
{}
{r}
nile <- scan("nile.txt")
nile
{}
{r}
typeof(nile)
{}
knitr::opts_chunk$set(echo = TRUE)
```{r arithmetic}
install.packages("xml2")
install.packages("xml2")
library(xml2)
library(rvest)
install.packages("dplyr")
install.packages("htmlTable")
url <- "https://en.wikipedia.org/wiki/Comma-separated_values"
html <- read_html(url)
name <- html %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2])
html_table()
print(htmlTable::htmlTable(name,useViewer=TRUE))
write.csv(name, file = "table.csv", row.names = F)
(df <- read.csv("table.csv"))
library(rvest)
install.packages("dplyr")
install.packages("htmlTable")
url <- "https://en.wikipedia.org/wiki/Comma-separated_values"
html <- read_html(url)
name <- html %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2])
html_table()
print(htmlTable::htmlTable(name,useViewer=TRUE))
write.csv(name, file = "table.csv", row.names = F)
(df <- read.csv("table.csv"))
name
library(rvest)
install.packages("dplyr")
install.packages("htmlTable")
url <- "https://en.wikipedia.org/wiki/Comma-separated_values"
html <- read_html(url)
name <- html %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2])
html_table()
print(htmlTable::htmlTable(name,useViewer=TRUE))
write.csv(name, file = "table.csv", row.names = F)
(df <- read.csv("table.csv"))
print("name")
install.packages("htmlTable")
library(rvest)
library(dbplyr)
library(htmlTable)
link <- "https://en.wikipedia.org/wiki/Comma-separated_values"
page <- read_html(link)
name <- page%>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]')%>%
html_table()
print(htmlTable: htmlTable(name,useViewer=TRUE))
write.csv(name, file = "table.csv", row.names = F)
(df <- read.csv("table.csv"))
library(rvest)
library(dbplyr)
library(htmlTable)
link <- "https://en.wikipedia.org/wiki/Comma-separated_values"
page <- read_html(link)
name <- page%>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]')%>%
html_table()
print(htmlTable: htmlTable(name,useViewer=TRUE))
write.csv(name, file = "table.csv", row.names = F)
(df <- read.csv("table.csv"))
write.csv(df,"C:\\Users\\samanthatricia@samanthas-mbp\\Desktop\\Assignment-2\\r-csv", row.names = FALSE)
library(rvest)
library(dbplyr)
library(htmlTable)
link <- "https://en.wikipedia.org/wiki/Comma-separated_values"
page <- read_html(link)
name <- page%>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]')%>%
html_table()
print(htmlTable: htmlTable(name,useViewer=TRUE))
write.csv(name, file = "table.csv", row.names = F)
(df <- read.csv("table.csv"))
write.csv(df,"Path to export the DataFrame\\r_csv.csv", row.names = FALSE)
library(rvest)
library(dbplyr)
library(htmlTable)
link <- "https://en.wikipedia.org/wiki/Comma-separated_values"
page <- read_html(link)
name <- page%>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]')%>%
html_table()
print(htmlTable: htmlTable(name,useViewer=TRUE))
write.csv(name, file = "table.csv", row.names = F)
(df <- read.csv("table.csv"))
library(rvest)
library(dbplyr)
library(htmlTable)
link <- "https://en.wikipedia.org/wiki/Comma-separated_values"
page <- read_html(link)
name <- page%>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]')%>%
html_table()
print(htmlTable: htmlTable(name,useViewer=TRUE))
write.csv(name, file = "table.csv", row.names = F)
(df <- read.csv("table.csv"))
#Radius
r<-2
#Function to compute the volume of a sphere with radius r
volume <- function(r,rho){
3/4*pi*r^2
}
#Function to compute the volumes of the spheres with radius r,r^2 and r^3
volume_vector <- function(r){
r<-22
for (r in 2:4){
volume(r)
}
}
#Run volume_vector(r) and print the volumes of the spheres with radius r,r^2 and r^3
volume_vector(r)
#Radius
r<-2
#Function to compute the volume of a sphere with radius r
volume <- function(r,rho){
3/4*pi*r^2
}
#Function to compute the volumes of the spheres with radius r, r^2 and r^3
volume_vector <- function(r){
r<-22
for (r in 2:4){
volume(r)
}
}
#Run volume_vector(r) and print the volumes of the spheres with radius r, r^2 and r^3
volume_vector(r)
def is_divisible_by_k(x, k):
'''
Checks whether x is divisible by k.
'''
assert x%k == 0
'''
Store all the integers that are multiples of 2 or 5 or 7 that are lower or equal to 1000 (excluding
doubles)
'''
x = ()
for i in range(1000):
if (is_divisible_by_k(x, 2) & is_divisible_by_k(x, 3)) | is_divisible_by_k(x, 7):
x.append(i)
'''
Sum all the integers that are multiples of 2 or 5 or 7 that are lower or equal to 1000 (excluding
doubles)
'''
sum(x)
View(volume)
2000 <- read.csv("~/Desktop/SIM/ST2195/dataverse_files/2000.csv.bz2", header = TRUE)
2000 <- read.csv("~/Desktop/SIM/ST2195/dataverse_files/2000.csv", header = TRUE)
2000 <- read.csv("~/Desktop/SIM/ST2195/dataverse_files/2000.csv.bz2", header = TRUE)
setwd("~/Desktop/st2195_Assignment_3/r_sql")
getwd()
library(DBI)
library(dplyr)
if (file.exists("airline_v2.db"))
file.remove("airline_v2.db")
conn <- dbConnect(RSQLite::SQLite(), "airline_v2.db")
airports <- read.csv("~/Desktop/SIM/ST2195/dataverse_files/airports.csv", header = TRUE)
carriers <- read.csv("~/Desktop/SIM/ST2195/dataverse_files/carriers.csv", header = TRUE)
planes <- read.csv("~/Desktop/SIM/ST2195/dataverse_files/plane-data.csv", header = TRUE)
dbWriteTable(conn, "airports", airports)
dbWriteTable(conn, "carriers", carriers)
dbWriteTable(conn, "planes", planes)
setwd("~/Desktop/st2195_Assignment_3/r_sql")
getwd()
library(DBI)
library(dplyr)
if (file.exists("airline_v2.db"))
file.remove("airline_v2.db")
conn <- dbConnect(RSQLite::SQLite(), "airline_v2.db")
airports <- read.csv("~/Desktop/SIM/ST2195/dataverse_files/airports.csv", header = TRUE)
source('~/Desktop/SIM/ST2195/prac/st2195_Assignment_7/r_code.R')
